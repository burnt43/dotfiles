#  _               _                                           _                   
# | |             | |                                         | |                  
# | |__   __ _ ___| |__ ______ _ __  _ __ ___  _ __ ___  _ __ | |_ ______ _ __ ___ 
# | '_ \ / _` / __| '_ \______| '_ \| '__/ _ \| '_ ` _ \| '_ \| __|______| '__/ __|
# | |_) | (_| \__ \ | | |     | |_) | | | (_) | | | | | | |_) | |_       | | | (__ 
# |_.__/ \__,_|___/_| |_|     | .__/|_|  \___/|_| |_| |_| .__/ \__|      |_|  \___|
#                             | |                       | |                        
#                             |_|                       |_|                        
#
# This is a modular file that makes the bash prompt the way I like it.
# This is for use on remote servers that way not have all the bells and
# whistles in their bash version.
# To use this in a ~/.bashrc add:
# [[ -e ~/.bash-prompt-rc ]] && . ~/.bash-prompt-rc

# Format the bash version so it is string comparable.
my_dot_formatted_bash_version=$(bash --version | head -1 | awk '{print $4}' | cut -d\( -f1)
my_bash_version_major=$(echo "$my_dot_formatted_bash_version" | cut -d. -f1)
my_bash_version_minor=$(echo "$my_dot_formatted_bash_version" | cut -d. -f2)
my_bash_version_patch=$(echo "$my_dot_formatted_bash_version" | cut -d. -f3)
my_formatted_bash_version=$(printf "%02d%02d%02d" $my_bash_version_major $my_bash_version_minor $my_bash_version_patch)

my_hostname=$(hostname | sed 's/\.monmouth\.com$//')

case "$my_hostname" in
  # Camden (Gray)
  cm-*)
    host_color_code=37
    ;;
  # New Brunswick (Cyan)
  nb-*)
    host_color_code=36
    ;;
  # Newark (Fuschia)
  nk-*|mg5|mg6)
    host_color_code=35
    ;;
  # Pleasantville (Blue)
  pl-*)
    host_color_code=34
    ;;
  # Red Bank (Red)
  app0|app1|app2|appdev0|conf0|conf1|dadmin|fs0|fs1|fsdev|gs3|gs4|gs5|gs6|gs7|gs8|hpbx0|hpbx1|hpbx2|hpbx3|hpbx4|hpbx5|hpbxdev|mg3|mg4|mtt3|mtt4|pbx|prog-dev|recorder0|recorder1|vidconf0|vidconf1)
    host_color_code=31
    ;;
  # VM (Black)
  order)
    host_color_code=30
    ;;
esac

function __shell_last_command__ {
  if [[ "$?" == "0" ]]; then
    echo -ne "\033[0;32m■\033[0;0m"
  else
    echo -ne "\033[0;31m■\033[0;0m"
  fi
}

function __shell_basic_info__ {
  # Dir
  if [[ "$(pwd)" == "/home/$(whoami)" ]]; then
    effective_dir="~"
  else
    effective_dir="$(basename $(pwd))"
  fi

  # User
  local username="$(whoami)"
  case "$username" in
    asterisk)
      effective_user="\033[0;37m$username\033[0;0m"
      ;;
    orderapp)
      effective_user="\033[0;37m$username\033[0;0m"
      ;;
    *)
      effective_user="$username"
      ;;
  esac

  echo -ne "$effective_user@\033[1;${host_color_code}m$my_hostname\033[0;0m \033[0;34m$effective_dir\033[0;0m"
}

function __shell_git_plugin__ {
  [[ ! -e "./.git" ]] && return

  local branch=$(git branch | grep '^*' | cut -d' ' -f2)
  local changes_present=$(git status . | grep -E "(^Changes|^Untracked)" | wc -l)

  if [[ "$changes_present" == "0" ]]; then
    echo -ne "(\033[0;36m$branch\033[0;0m)"
  else
    echo -ne "(\033[0;31m$branch\033[0;0m)"
  fi
}

# Through educated guessing the vim mode activation/deactivation character was
# introduced into bash in version 4.4.0. So if we have a bash version >= to
# 4.4.0 then we have to slightly adjust the prompt so support that, otherwise
# just use the default prompt style.
if [[ "$my_formatted_bash_version" > "040400" ]]; then
  PS1=' ┌$(__shell_last_command__) $(__shell_basic_info__)$(__shell_git_plugin__)\n┴% '
else
  PS1='┌$(__shell_last_command__) $(__shell_basic_info__)$(__shell_git_plugin__)\n└% '
fi
