# {{{ Development Software Run/Test Helpers
alias ami_dev="cd ~/git_clones/hosted-burnt43/ami_fw_proxy"
alias ami_run="ami_dev && RAILS_ENV=development JDEV=1 ruby -I /home/jcarson/git_clones/hosted-burnt43/ami_fw_proxy/ ./secure_multiplexer_proxy.rb"

alias ami_client_dev="cd ~/git_clones/asterisk-manager-interface-client"
alias ami_client_sample_run="ami_client_dev && bundle exec ruby -I~/git_clones/asterisk-manager-interface-client/lib ./sanity_checker.rb"
alias ami_client_test_run="ami_client_dev && bundle exec rake ami_client:test:run"

alias ami_message_capture_run="cd ~/git_clones/ami-message-capture && bundle exec ruby ./ami-message-capture.rb"

alias ami_socket_dev="cd ~/git_clones/ami-socket"
alias ami_socket_test_run="ami_socket_dev && bundle exec rake ami_socket:test:run"
alias ami_socket_console="ami_socket_dev && ./script/console"

alias asterisk_cdr_dev="cd ~/git_clones/asterisk-cdr"
alias asterisk_cdr_syncer_run="asterisk_cdr_dev && ASTERISK_CDR_ENV=development bundle exec ruby -I/home/jcarson/git_clones/asterisk-cdr/lib ./asterisk_cdr_syncer.rb"
alias asterisk_cdr_finder_run="asterisk_cdr_dev && ASTERISK_CDR_ENV=development bundle exec ruby -I/home/jcarson/git_clones/asterisk-cdr/lib ./asterisk_cdr_finder.rb"
alias asterisk_cdr_data_run="asterisk_cdr_dev && ASTERISK_CDR_ENV=development bundle exec ruby -I/home/jcarson/git_clones/asterisk-cdr/lib ./asterisk_cdr_data_processor.rb"
alias asterisk_cdr_cli_run="asterisk_cdr_dev && ASTERISK_CDR_ENV=devprod ASTERISK_CDR_EDITOR=/usr/bin/vim bundle exec ruby -I/home/jcarson/git_clones/asterisk-cdr/lib ./asterisk_cdr_cli.rb"
alias asterisk_cdr_fraud_run="asterisk_cdr_dev && ASTERISK_CDR_ENV=development bundle exec ruby -I/home/jcarson/git_clones/asterisk-cdr/lib ./asterisk_cdr_fraud.rb"
alias asterisk_cdr_test_run="asterisk_cdr_dev && ASTERISK_CDR_ENV=test bundle exec rake asterisk_cdr:test:run"

alias asterisk_config_dev="cd ~/git_clones/asterisk-config"
alias asterisk_config_sample_run="asterisk_config_dev && bundle exec ruby -I./lib ./sanity_checker.rb"

alias asterisk_database_dev="cd ~/git_clones/asterisk-database"
alias asterisk_database_sample_run="asterisk_database_dev && bundle exec ruby -I./lib ./sanity_checker.rb"

alias asterisk_queue_ctl_dev="cd /home/jcarson/git_clones/asterisk-queue-ctl"
alias asterisk_queue_ctl_test_run="asterisk_queue_ctl_dev && ASTERISK_QUEUE_CTL_ENV=test bundle exec rake asterisk_queue_ctl:test:run"

alias auto_dialer_dev="cd ~/git_clones/hosted-burnt43/auto_dialer"
alias auto_dialer_run="auto_dialer_dev && AUTO_DIALER_ENV=development bundle exec ruby ./auto_dialer_server.rb"

alias call_blaster_dev="cd ~/git_clones/call_blaster"
alias call_blaster_run="call_blaster_dev && bundle exec ruby ./call_blaster_server.rb"
alias call_blaster_test_run="call_blaster_dev && CALL_BLASTER_ENV=test bundle exec rake call_blaster:test:run"

alias call_recording_dev="cd ~/git_clones/call_recorder"

alias cli_builder_dev="cd ~/git_clones/cli-builder"
alias cli_builder_sample_run="cli_builder_dev && ruby -I/home/jcarson/git_clones/cli-builder/lib ./sanity_check_example.rb"
alias cli_builder_test_run="cli_builder_dev && bundle exec rake cli_builder:test:run"

alias cti_dev="cd ~/git_clones/cti"
alias cti_hpbxgui_run="cti_dev && CTI_ENV=development_hpbxgui ruby -I ./lib/ server.rb"
alias cti_mtt_crm_run="cti_dev && CTI_ENV=development_mtt_crm ruby -I ./lib/ server.rb"

alias data_monitor_dev="cd /home/jcarson/git_clones/data-monitor"
alias data_monitor_test_run="data_monitor_dev && DATA_MONITOR_ENV=test THINGSPACE_API_RUBY_ENV=test bundle exec rake data_monitor:test:run"
alias data_monitor_run="data_monitor_dev && XYMSRV=209.191.1.133 XYMON=/home/jcarson/xymon/client/bin/xymon DATA_MONITOR_ENV=development bundle exec ruby -I ./lib ./data_monitor.rb"

alias engoncall_dev="cd ~/git_clones/engoncall-burnt43"
alias engoncall_test_run="engoncall_dev && ENGONCALL_ENV=test bundle exec rake engoncall:test:run"

alias eqpt_gui_dev="cd /home/jcarson/git_clones/eqpt-gui"
# Add to the PATH
#   1. /home/jcarson/.gems/eqpt-gui/ruby/3.1.0/bin
#   2. /usr/local/ruby/ruby-3.1.1/bin
alias eqpt_gui_set_path="echo \$PATH | grep -q -v '\/3.1.0\/bin:.*\/ruby-3.1.1\/bin:' && export PATH=\"/home/jcarson/.gems/eqpt-gui/ruby/3.1.0/bin:/usr/local/ruby/ruby-3.1.1/bin:\$PATH\""
# Remove from the PATH
#   1. /home/jcarson/.gems/eqpt-gui/ruby/3.1.0/bin
#   2. /usr/local/ruby/ruby-3.1.1/bin
alias eqpt_gui_unset_path="echo \$PATH | grep -q '\/3.1.0\/bin:.*\/ruby-3.1.1\/bin:' && foo=\$(echo \$PATH | sed 's/^\/home\/jcarson\/.gems\/eqpt-gui\/ruby\/3.1.0\/bin:\/usr\/local\/ruby\/ruby-3.1.1\/bin://g') && export PATH=\$foo"

alias hop_dev="cd ~/git_clones/operator-panel"
alias hop_run="hop_dev && HOP_ENV=development bundle exec ruby ./hop.rb"
alias hop_run_ruby_3="hop_dev && HOP_ENV=development /usr/local/ruby/ruby-3.0.2/bin/bundle exec /usr/local/ruby/ruby-3.0.2/bin/ruby ./hop.rb"

# {{{ function __hop_client__ 
function __hop_client__ {
  local username="$1"

  if [[ -z "$username" ]]; then
    # Just find the first session_id in the database.
    local session_id=$(mysql hpbx_indie_crm --skip-column-names --batch -e "SELECT session_id FROM sessions LIMIT 1;")
  else
    # Execute some minimal ruby code to find the session_id from the given
    # username.
    local session_id=$(hop_dev &&
    GEM_HOME=/home/jcarson/.gems/operator-panel/ruby/2.6.0 \
    GEM_PATH="" \
    /usr/local/ruby/ruby-2.6.1/bin/ruby \
    -r active_record \
    -r active_record/session_store \
    -r action_controller \
    -e "h={}; h['development']=YAML.load(IO.read('./config/env_config.yml')).dig('development', 'database'); ActiveRecord::Base.configurations = h; ActiveRecord::Base.establish_connection(:development); puts ActiveRecord::SessionStore::Session.all.find {|x| x.data['current_username'] == '$username'}&.session_id" \
    2>/dev/null)
  fi

  if [[ -z "$session_id" ]]; then
    # Generate a random bullshit session_id if we couldn't find one.
    local session_id=$(cat /dev/urandom | tr -c -d 'a-z0-9' | fold -w 32 | head -1)
  fi

  # Connect to the hop server using the session_id we found/generated.
  cd ~/git_clones/hop_js_client
  node ./hop_js_client.js wss://jcarson-hop.monmouth.com:11081 $session_id 2>/dev/null
}
# }}}
alias hop_client_dev="cd ~/git_clones/hop_js_client"
alias hop_client_run="__hop_client__"

alias hpbxgui_dev="cd ~/git_clones/hosted-burnt43/hpbxgui"
alias hpbxgui_test_run="hpbxgui_dev && RAILS_ENV=hpbxgui_test bundle exec rake hpbxgui:test:run"
alias hpbxgui_test_db_reset="hpbxgui_dev && RAILS_ENV=development bundle exec rake db:schema:dump && RAILS_ENV=hpbxgui_test bundle exec rake hpbxgui:test:db:reset"

alias influxdb_dev="cd ~/git_clones/influxdb-client"
alias influxdb_test_run="influxdb_dev && bundle exec rake influxdb_client:test:run"

alias lite_orm_dev="cd ~/git_clones/lite-orm"
alias lite_orm_test_run="lite_orm_dev && bundle exec rake lite_orm:test:run"

alias mtt_crm_dev="cd ~/git_clones/mtt_crm"
alias mtt_crm_test_run="mtt_crm_dev && RAILS_ENV=test bundle exec rake crm:test:run"
alias mtt_crm_meta_test_run="mtt_crm_dev && RAILS_ENV=test bundle exec rake crm:test:meta:run"
alias mtt_crm_clean_branches="~/gist_clones/git_branch_cleaner/git_branch_cleaner.sh ~/git_clones/mtt_crm-burnt43 mtt"

alias rec_mon_dev="cd ~/git_clones/rec-mon"
alias rec_mon_test_run="rec_mon_dev && bundle exec rake rec_mon:test:run"

alias ruby_daemon_monitor_dev="cd ~/git_clones/ruby-daemon-monitor"
alias ruby_daemon_monitor_app_run="ruby_daemon_monitor_dev && RUBY_DAEMON_MONITOR_ENV=development_app ruby -I/home/jcarson/git_clones/ruby-daemon-monitor-burnt43/lib ./ruby_daemon_monitor.rb"
alias ruby_daemon_monitor_crm_run="ruby_daemon_monitor_dev && RUBY_DAEMON_MONITOR_ENV=development_crm ruby -I/home/jcarson/git_clones/ruby-daemon-monitor-burnt43/lib ./ruby_daemon_monitor.rb"
alias ruby_daemon_monitor_release="cd ~/git_clones/ruby-daemon-monitor-monmouthtelecom && git checkout master && git pull && git checkout stable && git pull && git merge --no-ff master && git push && sudo su asterisk -c 'cd /home/jcarson/git_clones/ruby-daemon-monitor-monmouthtelecom && bundle exec cap production deploy'"

alias softphone_dev="cd ~/git_clones/mtt-softphone"
alias softphone_run="softphone_dev && npm start"

alias solr_mon_dev="cd ~/git_clones/solr-file-monitor"
alias solr_mon_run="solr_mon_dev && SOLR_FILE_MONITOR_ENV=development ruby -I/home/jcarson/git_clones/solr-file-monitor-burnt43/lib -I/usr/local/ruby/ruby-2.6.1/lib/ruby/gems/2.6.0/gems/bundler-2.0.2/lib/ ./file_monitor_daemon.rb"
alias solr_mon_test="solr_mon_dev && SOLR_FILE_MONITOR_ENV=test bundle exec rake solr_file_monitor:test:run"
alias solr_mon_start_daemon="solr_mon_dev && ./safe-solr-file-monitor"
alias solr_mon_stop_daemon="ps aux | grep 'safe-solr-file-monitor' | grep -v 'grep' | awk '{print \$2}' | xargs -I pid kill -9 pid && ps aux | grep 'file_monitor_daemon\.rb' | grep -v 'grep' | awk '{print \$2}' | xargs -I pid kill -9 pid"

alias thingspace_dev="cd /home/jcarson/git_clones/thingspace-api-ruby"
alias thingspace_test_run="thingspace_dev && THINGSPACE_API_RUBY_ENV=test bundle exec rake thingspace_api_ruby:test:run"
alias thingspace_sanity_check_run="thingspace_dev && script/console -c 'Thingspace::SanityCheck.run!'"
# }}}

# {{{ Useful Helpers
# {{{ function __ensure_mttpbx_virtual_server_exists__ 
function __ensure_mttpbx_virtual_server_exists__ {
  # +----+--------+--------------+------------------+------------------+-----------------+
  # | id | name   | ip           | hostname         | asterisk_version | type            |
  # +----+--------+--------------+------------------+------------------+-----------------+
  # | 13 | mttpbx | 209.191.9.13 | pbx.monmouth.com | 13               | HostedPBXServer |
  # +----+--------+--------------+------------------+------------------+-----------------+

  local db_name="$1"

  if [[ -z "$db_name" ]]; then
    db_name="hpbx_indie_crm"
  fi

  local virtual_server_table=$(mysql $db_name --batch --skip-column-names -e "SHOW TABLES LIKE '%virtual_servers%';")

  if [[ -z "$virtual_server_table" ]]; then
    return 1
  fi

  local pbx_count=$(mysql $db_name --batch --skip-column-names -e "SELECT COUNT(*) FROM virtual_servers WHERE name='mttpbx' AND ip='209.191.9.13' AND hostname='pbx.monmouth.com' AND asterisk_version='13' AND type='HostedPBXServer'";)

  if [[ "$pbx_count" == "0" ]]; then
    mysql $db_name -e "INSERT INTO virtual_servers SET name='mttpbx', ip='209.191.9.13', hostname='pbx.monmouth.com', asterisk_version='13', type='HostedPBXServer';"
  else
    return 0
  fi
}
# }}}
alias ensure_mttpbx_virtual_server_exists="__ensure_mttpbx_virtual_server_exists__"

alias mount_rwolflaw="sudo mkdir -p /mnt/rwolflaw && sudo mount -t cifs //gs5.monmouth.com/rwolflaw /mnt/rwolflaw -o 'username=rwolflaw,password=$(cat ~/.rwolflaw_samba_pass),vers=1.0'"
alias umount_rwolflaw="sudo umount /mnt/rwolflaw && sudo rm -R /mnt/rwolflaw"

alias spectra2="/usr/bin/rdesktop -u Administrator -p  spectra2 -g 1028x768 200.255.100.185"
alias mount_spectra2="sudo mkdir -p /mnt/spectra2 && sudo mount -t cifs //200.255.100.185/spectra2 /mnt/spectra2 -o 'username=Administrator,password=$(cat ~/.spectra2_pass),vers=1.0'"
alias umount_spectra2="sudo umount /mnt/spectra2 && sudo rm -R /mnt/spectra2"

# {{{ function __text2speech__ 
function __text2speech__ {
  # Possible Voices
  # en-US_AllisonVoice,
  # en-US_AllisonV3Voice,
  # en-US_EmilyV3Voice,
  # en-US_HenryV3Voice,
  # en-US_KevinV3Voice,
  # en-US_LisaVoice,
  # en-US_LisaV3Voice,
  # en-US_MichaelVoice,
  # en-US_MichaelV3Voice,
  # en-US_OliviaV3Voice

  local msg="$1"
  local voice="$2"

  case "$voice" in
    allison) text2speech_voice="en-US_AllisonV3Voice" ;;
    emily) text2speech_voice="en-US_EmilyV3Voice" ;;
    lisa) text2speech_voice="en-US_LisaV3Voice" ;;
    olivia) text2speech_voice="en-US_OliviaV3Voice" ;;
    *)
      voice=lisa
      text2speech_voice="en-US_LisaV3Voice"
      ;;
  esac

  local text2speech_output=$(echo "$msg" | sed 's/ /-/g')
  local text2speech_text=$(echo "$msg" | sed 's/ /%20/g')
  local test2speech_accept="audio%2Fwav"
  local text2speech_api_url="https://api.us-east.text-to-speech.watson.cloud.ibm.com/instances/afbf1900-fd96-4d18-beec-8fca13a6cf51/v1/synthesize"
  local text2speech_api_key=$(cat ~/.text2speech-api-key)

  text2speech_output="${voice}-${text2speech_output}.wav"

  # echo "curl -X GET -u \"apikey:${text2speech_api_key}\" --output ${text2speech_output} \"${text2speech_api_url}?accept=${test2speech_accept}&text=${text2speech_text}&voice=${text2speech_voice}\""
  curl -X GET -u "apikey:${text2speech_api_key}" --output ${text2speech_output} "${text2speech_api_url}?accept=${test2speech_accept}&text=${text2speech_text}&voice=${text2speech_voice}"
}
# }}}
alias text2speech="__text2speech__"

# {{{ function __convert_to_ulaw__ 
function __convert_to_ulaw__ {
  local input_file="$1"
  local ffmpeg_bin="$(which ffmpeg)"
  local ulaw_file=$(echo "$input_file" | sed -r 's/^(.*)\.(.*)$/\1.ulaw/g')

  ${ffmpeg_bin} -y -i ${input_file} -ar 8000 -ac 1 -ab 64 -f mulaw ${ulaw_file} -map 0:0 1>/dev/null 2>/dev/null
}
# }}}
alias convert_to_ulaw="__convert_to_ulaw__"

# {{{ function __compile_mcl__ 
function __compile_mcl__ {
  # Find where the possibly upgraded perl libperl.so is.
  local installed_libperl=$(find /usr/lib/perl5 -type f -name 'libperl.so' | head -1)
  [[ -z "$installed_libperl" ]] && return 0

  # Where the system thinks libperl.so is.
  local system_libperl=/usr/lib/libperl.so

  # Link the system libperl to the new libperl
  sudo rm $system_libperl && sudo ln -s $installed_libperl $system_libperl

  local mcl_source_dir=/home/jcarson/sources/mcl_64bit/mcl-0.53.00

  cd $mcl_source_dir && make distclean && ./configure --disable-python && make && sudo make install
}
# }}}
alias compile_mcl="__compile_mcl__"

# {{{ function __mk_mail_dir__ 
function __mk_mail_dir__ {
  local dirname="$1"
  mkdir -p /home/jcarson/Mail/INBOX/${dirname}/{cur,new,tmp}
  chmod -R 0700 /home/jcarson/Mail/INBOX/${dirname}
}
# }}}
alias mk_mail_dir="__mk_mail_dir__"

alias xymon_ctl="XYMSRV=209.191.1.133 XYMON=/home/jcarson/xymon/client/bin/xymon /home/jcarson/git_clones/xymon-burnt43/script/xymon_ctl.sh"

alias minicom="ssh -oKexAlgorithms=+diffie-hellman-group1-sha1 minicom@mtt3"

alias t38router="ssh -oKexAlgorithms=+diffie-hellman-group1-sha1 -oHostKeyAlgorithms=+ssh-dss -c 3des-cbc 64.19.145.26"

function __imagemagick_pkgconfig__ {
  local version="$1"
  local imagemagick6_dir=/usr/local/ImageMagick/6.9.12-34/lib/pkgconfig
  local imagemagick7_dir=/usr/lib/imagemagick7/pkgconfig
  local pkgconfig_dir=/usr/lib/pkgconfig

  echo -n "moving existing imagemagick pc files out of $pkgconfig_dir..."
  sudo find $pkgconfig_dir -maxdepth 1 -type f -name '*Magick*.pc' -exec mv {} /home/jcarson/.tmp \;
  sudo find $pkgconfig_dir -maxdepth 1 -type f -name '*Wand*.pc' -exec mv {} /home/jcarson/.tmp \;
  ([[ "$?" != "0" ]] && echo -e "\033[0;31mFAIL\033[0;0m" && return 1) || echo -e "\033[0;32mOK\033[0;0m"

  case "$version" in
    6)
      echo -n "moving pc files in $imagemagick6_dir to $pkgconfig_dir..."
      sudo cp ${imagemagick6_dir}/*.pc $pkgconfig_dir
      ([[ "$?" != "0" ]] && echo -e "\033[0;31mFAIL\033[0;0m" && return 1) || echo -e "\033[0;32mOK\033[0;0m"
      ;;
    7)
      echo -n "moving pc files in $imagemagick7_dir to $pkgconfig_dir..."
      sudo cp ${imagemagick7_dir}/*.pc $pkgconfig_dir
      ([[ "$?" != "0" ]] && echo -e "\033[0;31mFAIL\033[0;0m" && return 1) || echo -e "\033[0;32mOK\033[0;0m"
      ;;
  esac
}
alias imagemagick_pkfconfig="__imagemagick_pkgconfig__"
# }}}
